backend F_origin {
    .connect_timeout = 5s;
    .dynamic = true;
    .port = "<%= config.fetch('origin_port', 443) %>";
    .host = "<%= config.fetch('origin_hostname') %>";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .share_key = "<%= config.fetch('service_id') %>";

    .ssl = true;
    .ssl_check_cert = <%= config['disable_tls_validation'] ? 'never' : 'always' %>;
    .min_tls_version = "<%= config.fetch('min_tls_version', '1.2') %>";
    <%- if config['ssl_ciphers'] -%>
    .ssl_ciphers = "<%= config['ssl_ciphers'] -%>";
    <%- end -%>
    .ssl_cert_hostname = "<%= config.fetch('ssl_cert_hostname', config.fetch('origin_hostname')) %>";
    .ssl_sni_hostname = "<%= config.fetch('ssl_sni_hostname', config.fetch('origin_hostname')) %>";

    .probe = {
        .request =
            "HEAD / HTTP/1.1"
            "Host: <%= config.fetch('origin_hostname') %>"
            "User-Agent: Fastly healthcheck (git version: <%= config['git_version'] %>)"
<% if config['rate_limit_token'] %>
            "Rate-Limit-Token: <%= config['rate_limit_token'] %>"
<% end %>
            "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = 10s;
    }
}
# Mirror backend for provider 0
backend F_mirror0 {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "<%= config.fetch('provider0_mirror_port', 443) %>";
    .host = "<%= config.fetch('provider0_mirror_hostname') %>";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .share_key = "<%= config.fetch('service_id') %>";

    .ssl = true;
    .ssl_check_cert = <%= config['disable_tls_validation'] ? 'never' : 'always' %>;
    .min_tls_version = "<%= config.fetch('min_tls_version', '1.2') %>";
    <%- if config['ssl_ciphers'] -%>
    .ssl_ciphers = "<%= config['ssl_ciphers'] -%>";
    <%- end -%>
    .ssl_cert_hostname = "<%= config.fetch('ssl_cert_hostname', config.fetch('provider0_mirror_hostname')) %>";
    .ssl_sni_hostname = "<%= config.fetch('ssl_sni_hostname', config.fetch('provider0_mirror_hostname')) %>";

    .probe = {
        .request =
            "HEAD / HTTP/1.1"
            "Host: <%= config.fetch('provider0_mirror_hostname') %>"
            "User-Agent: Fastly healthcheck (git version: <%= config['git_version'] %>)"
            "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = 10s;
    }
}
# Mirror backend for provider 1
backend F_mirror1 {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "<%= config.fetch('provider1_mirror_port', 443) %>";
    .host = "<%= config.fetch('provider1_mirror_hostname') %>";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .share_key = "<%= config.fetch('service_id') %>";

    .ssl = true;
    .ssl_check_cert = <%= config['disable_tls_validation'] ? 'never' : 'always' %>;
    .min_tls_version = "<%= config.fetch('min_tls_version', '1.2') %>";
    <%- if config['ssl_ciphers'] -%>
    .ssl_ciphers = "<%= config['ssl_ciphers'] -%>";
    <%- end -%>
    .ssl_cert_hostname = "<%= config.fetch('ssl_cert_hostname', config.fetch('provider1_mirror_hostname')) %>";
    .ssl_sni_hostname = "<%= config.fetch('ssl_sni_hostname', config.fetch('provider1_mirror_hostname')) %>";

    .probe = {
        .request =
            "HEAD / HTTP/1.1"
            "Host: <%= config.fetch('provider1_mirror_hostname') %>"
            "User-Agent: Fastly healthcheck (git version: <%= config['git_version'] %>)"
            "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = 10s;
    }
}

backend sick_force_grace {
  .host = "127.0.0.1";
  .port = "1";
  .probe = {
    .request = "invalid";
    .interval = 365d;
    .initial = 0;
  }
}


acl purge_ip_whitelist {
  "37.26.93.252";     # Skyscape mirrors
  "31.210.241.100";   # Carrenza mirrors
<% if environment == 'staging' %>
  "31.210.245.70";    # Carrenza Staging
<% elsif environment == 'production' %>
  "31.210.245.86";    # Carrenza Production
<% end %>
  "23.235.32.0"/20;   # Fastly cache node
  "43.249.72.0"/22;   # Fastly cache node
  "103.244.50.0"/24;  # Fastly cache node
  "103.245.222.0"/23; # Fastly cache node
  "103.245.224.0"/24; # Fastly cache node
  "104.156.80.0"/20;  # Fastly cache node
  "151.101.0.0"/16;   # Fastly cache node
  "157.52.64.0"/18;   # Fastly cache node
  "172.111.64.0"/18;  # Fastly cache node
  "185.31.16.0"/22;   # Fastly cache node
  "199.27.72.0"/21;   # Fastly cache node
  "199.232.0.0"/16;   # Fastly cache node
  "202.21.128.0"/24;  # Fastly cache node
  "203.57.145.0"/24;  # Fastly cache node
}

sub vcl_recv {

  # Allow FASTLYPURGE from IPs defined in the ACL only, else return a HTTP 403
  if (req.request == "FASTLYPURGE") {
    if (client.ip ~ purge_ip_whitelist) {
      return (lookup);
    }
    error 403 "Forbidden";
  }

  # Check whether the remote IP address is in the list of blocked IPs
  if (table.lookup(ip_address_blacklist, client.ip)) {
    error 403 "Forbidden";
  }

  # Force SSL.
  if (!req.http.Fastly-SSL) {
     error 801 "Force SSL";
  }

  # Serve from stale for 24 hours if origin is sick
  set req.grace = 24h;

  # Default backend.
  set req.backend = F_origin;
  set req.http.Fastly-Backend-Name = "origin";

  # Serve stale if it exists.
  if (req.restarts > 0) {
    set req.backend = sick_force_grace;
    set req.http.Fastly-Backend-Name = "stale";
  }

  # Failover to mirror.
  if (req.restarts > 1) {
    # Don't serve from stale for mirrors
    set req.grace = 0s;
    set req.http.Fastly-Failover = "1";

    set req.backend = F_mirror0;
    set req.http.host = "<%= config.fetch('provider0_mirror_hostname') %>";
    set req.http.Fastly-Backend-Name = "mirror0";
  }

  # FIXME: Prefer a fallback director if we move to Varnish 3
  if (req.restarts > 2) {
    set req.backend = F_mirror1;
    set req.http.host = "<%= config.fetch('provider1_mirror_hostname') %>";
    set req.http.Fastly-Backend-Name = "mirror1";
  }

  # Unspoofable original client address.
  set req.http.True-Client-IP = req.http.Fastly-Client-IP;

#FASTLY recv

  if (req.request != "HEAD" && req.request != "GET" && req.request != "FASTLYPURGE") {
    return(pass);
  }

  # Make sure the original 'A' version is stored in the GOV.UK Mirror
  if (req.http.User-Agent ~ "^GOV\.UK Crawler Worker" {
    set req.http.GOVUK-ABTest-Example = "A";
  } else if (req.http.Cookie ~ "ABTest-Example") {
    # Set the value of the header to whatever decision was previously made
    set req.http.GOVUK-ABTest-Example = req.http.Cookie:ABTest-Example;
  } else {
    if (randombool(5,10)) {
      set req.http.GOVUK-ABTest-Example = "B";
    } else {
      set req.http.GOVUK-ABTest-Example = "A";
    }
  }

  if (req.http.User-Agent ~ "^GOV\.UK Crawler Worker" {
    set req.http.GOVUK-ABTest-EducationNavigation = "A";
  # Some users, such as remote testers, will be given a URL with a query string
  # to place them into a specific bucket.
  } else if (req.url ~ "[\?\&]ABTest-EducationNavigation=A(&|$)") {
    set req.http.GOVUK-ABTest-EducationNavigation = "A";
  } else if (req.url ~ "[\?\&]ABTest-EducationNavigation=B(&|$)") {
    set req.http.GOVUK-ABTest-EducationNavigation = "B";
  } else if (req.http.Cookie ~ "ABTest-EducationNavigation") {
    # Set the value of the header to whatever decision was previously made
    set req.http.GOVUK-ABTest-EducationNavigation = req.http.Cookie:ABTest-EducationNavigation;
  } else {
    # TODO: Once the education navigation A/B test starts, increase the
    # probability of a user seeing the new 'B' version. When we do this, we MUST
    # increase the cookie expiry time in vcl_deliver below.
    # For now, always show users the original 'A' version.
    if (randombool(0,10)) {
      set req.http.GOVUK-ABTest-EducationNavigation = "B";
    } else {
      set req.http.GOVUK-ABTest-EducationNavigation = "A";
    }
  }

  return(lookup);
}

sub vcl_fetch {
#FASTLY fetch

  set beresp.http.Fastly-Backend-Name = req.http.Fastly-Backend-Name;

  if ((beresp.status >= 500 && beresp.status <= 599) && req.restarts < 3 && (req.request == "GET" || req.request == "HEAD") && !beresp.http.No-Fallback) {
    set beresp.saintmode = 5s;
    return (restart);
  }

  if (req.restarts == 0) {
    # Keep stale for origin
    set beresp.grace = 24h;
  }

  if(req.restarts > 0 ) {
    set beresp.http.Fastly-Restarts = req.restarts;
  }

  if (beresp.http.Cache-Control ~ "private") {
    set req.http.Fastly-Cachetype = "PRIVATE";
    return (pass);
  }

  if (beresp.http.Cache-Control ~ "max-age=0") {
    return (pass);
  }

  if (beresp.http.Cache-Control ~ "no-(store|cache)") {
    return (pass);
  }

  # The only valid status from our mirrors is a 200. They cannot return e.g.
  # a 301 status code. All errors from the mirrors are set to 503 as they
  # cannot know whether or not a page actually exists (e.g. /search is a valid
  # URL but the mirror cannot return it).
  if (beresp.status != 200 && beresp.http.Fastly-Backend-Name ~ "mirror") {
    set beresp.status = 503;
  }

  if (beresp.status >= 500 && beresp.status <= 599) {
    set req.http.Fastly-Cachetype = "ERROR";
    set beresp.ttl = 1s;
    set beresp.grace = 5s;
    return (deliver);
  }

  if (beresp.http.Expires || beresp.http.Surrogate-Control ~ "max-age" || beresp.http.Cache-Control ~"(s-maxage|max-age)") {
    # keep the ttl here
  } else {
    # apply the default ttl
    set beresp.ttl = <%= config.fetch('default_ttl') %>s;
  }

  # Override default.vcl behaviour of return(pass).
  if (beresp.http.Set-Cookie) {
    return (deliver);
  }
}

sub vcl_hit {
#FASTLY hit
}

sub vcl_miss {
#FASTLY miss
}

sub vcl_deliver {
  # Set the A/B cookies
  # Only set the A/B example cookie if the request is to the A/B test page. This
  # ensures that most visitors to the site aren't assigned an irrelevant test
  # cookie.
  if (req.url ~ "^/help/ab-testing"
    && req.http.User-Agent !~ "^GOV\.UK Crawler Worker"
    && req.http.Cookie !~ "ABTest-Example") {
    # Set a fairly short cookie expiry because this is just an A/B test demo.
    add resp.http.Set-Cookie = "ABTest-Example=" req.http.GOVUK-ABTest-Example "; expires=" now + 1d;
  }
  if (req.http.Cookie !~ "ABTest-EducationNavigation") {
    # TODO: Increase expiry time to 'now + 1y' when we start to assign users to
    # the 'B' bucket. It is currently 1 day because users will all receive the
    # 'A' cookie before the A/B test begins, and we need to make sure that they
    # don't all get stuck with the 'A' version when the test starts.
    add resp.http.Set-Cookie = "ABTest-EducationNavigation=" req.http.GOVUK-ABTest-EducationNavigation "; expires=" now + 1d "; path=/";
  }

#FASTLY deliver
}

sub vcl_error {
  if (obj.status == 801) {
    set obj.status = 301;
    set obj.response = "Moved Permanently";
    set obj.http.Location = "https://" req.http.host req.url;
    set obj.http.Fastly-Backend-Name = "force_ssl";
    synthetic {""};
    return (deliver);
  }

  # Assume we've hit vcl_error() because the backend is unavailable
  # for the first two retries. By restarting, vcl_recv() will try
  # serving from stale before failing over to the mirrors.
  if (req.restarts < 3) {
    return (restart);
  }

  set obj.http.Fastly-Backend-Name = "error";
  synthetic {"
    <!DOCTYPE html>
    <html>
      <head>
        <title>Welcome to GOV.UK</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 0; }
          header { background: black; }
          h1 { color: white; font-size: 29px; margin: 0 auto; padding: 10px; max-width: 990px; }
          p { color: black; margin: 30px auto; max-width: 990px; }
        </style>
      </head>
      <body>
        <header><h1>GOV.UK</h1></header>
        <p>We're experiencing technical difficulties. Please try again later.</p>
      </body>
    </html>"};

  return (deliver);

#FASTLY error
}

# pipe cannot be included.

sub vcl_pass {
#FASTLY pass
}

sub vcl_hash {
#FASTLY hash
}
